/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group 'NNA'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'

buildscript {
    repositories {
        maven { url = "https://jcenter.bintray.com" }
        maven { url = "https://repo.maven.apache.org/maven2" }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:2.2.4'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.13.0"
        classpath "net.nemerosa:versioning:2.7.1"
    }
}

apply plugin: 'idea'
apply plugin: "eclipse"
apply plugin: 'os-package'
apply plugin: 'license'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'net.nemerosa.versioning'

eclipse {
  classpath {
    defaultOutputDir = file('build/eclipse')
  }
}

ext {
    mainClass = (properties.get("mainClass") == null) ? "" : "${mainClass}"
    hadoopVersion = (properties.get("hadoopVersion") == null) ? "2.7.0" : "${hadoopVersion}"
    println("Building with hadoopVersion: ${hadoopVersion}")
}

versioning {
    full = { scmInfo -> ("${scmInfo.tag}" == "null" ? "${scmInfo.lastTag}." : "${scmInfo.tag}.") + hadoopVersion }
    dirty = { version -> "${version}" }
}

checkstyle {
    toolVersion "7.8.2"
    configFile file("config/checkstyle/checkstyle.xml")
    sourceSets = [project.sourceSets.main]
}

spotless {
    java {
        googleJavaFormat('1.3')
        licenseHeaderFile file('license.header.spotless')
        removeUnusedImports()
        trimTrailingWhitespace()
    }
}

license {
    header = file('license.header')
    excludePatterns = [ "**/bootstrap*",
                        "**/Chart*",
                        "**/cycle.js",
                        "**/jquery*",
                        "**/sweetalert*",
                        "**/datatables*",
                        "**/jszip.min.js",
                        "**/dataTables.buttons.min.js",
                        "**/buttons.html5.min.js",
                        "**/css/*datatables*",
                        "**/npm.js",
                        "**/*.blank.xml",
                        "**/*.md" ].toSet()
}

findbugs {
    findbugsTest.enabled = false
}

jacoco {
    toolVersion = "0.8.1"
}

task(execute, dependsOn: 'testClasses', type: JavaExec) {
    main = "${mainClass}"
    classpath = sourceSets.test.runtimeClasspath
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
}

sourceSets.main.java.srcDirs "src/main/java", "src/main/${hadoopVersion}"
sourceSets.test.java.srcDirs "src/test/java", "src/test/${hadoopVersion}"

compileJava {
    dependsOn versionDisplay
    dependsOn versionFile
}

repositories {
    maven { url = "https://jcenter.bintray.com" }
    maven { url = "https://repo.maven.apache.org/maven2" }
}

configurations {
    compile.extendsFrom(outboundDep)
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'org.mortbay.jetty', module: 'servlet-api'
    all*.exclude group: 'javax.servlet', module: 'servlet-api'
}

dependencies {
    outboundDep files('lib/airconcurrentmap.jar')
    outboundDep group: 'org.pac4j', name: 'spark-pac4j', version: '1.2.3'
    outboundDep group: 'org.pac4j', name: 'pac4j-ldap', version: '1.9.4'
    outboundDep group: 'org.pac4j', name: 'pac4j-jwt', version: '1.9.4'
    outboundDep group: 'com.sparkjava', name: 'spark-core', version: '2.5'
    outboundDep group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    outboundDep group: 'org.mortbay.jetty', name: 'jetty', version: '6.1.26'
    outboundDep group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
    outboundDep group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.21'
    outboundDep group: 'log4j', name: 'log4j', version: '1.2.17'
    outboundDep group: 'javax.mail', name: 'mail', version: '1.4.7'
    outboundDep group: 'org.hsqldb', name: 'hsqldb', version: '2.4.0'
    outboundDep group: 'org.mapdb', name: 'mapdb', version: '3.0.5'
    outboundDep(group: 'com.google.guava', name: 'guava', version: '11.0.2') {
        force = true
    }
    outboundDep(group: 'commons-io', name: 'commons-io', version: '2.4') {
        force = true
    }
    outboundDep group: 'com.github.jsqlparser', name: 'jsqlparser', version: '2.1'
    outboundDep group: 'com.boundary', name: 'high-scale-lib', version: '1.0.6'
    outboundDep group: 'org.eclipse.collections', name: 'eclipse-collections-api', version: '10.1.0'
    outboundDep group: 'org.eclipse.collections', name: 'eclipse-collections', version: '10.1.0'
    outboundDep group: 'org.apache.hadoop', name: 'hadoop-common', version: "${hadoopVersion}"
    outboundDep group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: "${hadoopVersion}"
    testCompile group: 'org.apache.hadoop', name: 'hadoop-common', version: "${hadoopVersion}", classifier: 'tests'
    testCompile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: "${hadoopVersion}", classifier: 'tests'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.19'
    testCompile group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.19'

    if (hadoopVersion.startsWith("3.")) {
        outboundDep group: 'org.apache.hadoop', name: 'hadoop-hdfs-client', version: "${hadoopVersion}"
    }
}

buildRpm {
    postInstall 'mkdir -p -m 0755 /usr/local/nn-analytics/dfs/name/current && ' +
            'mkdir -p -m 0755 /usr/local/nn-analytics/dfs/name/legacy && ' +
            'chown -R hdfs: /usr/local/nn-analytics/dfs && ' +
            'mkdir -p -m 0755 /usr/local/nn-analytics/db && ' +
            'chown -R hdfs: /usr/local/nn-analytics/db &&' +
            'mkdir -p -m 0755 /var/log/nn-analytics && ' +
            'chown hdfs: /var/log/nn-analytics && ' +
            'cp /usr/local/nn-analytics/bin/nn-analytics /etc/init.d/ && ' +
            'chkconfig --add nn-analytics'
}

buildDeb {
    postInstall 'mkdir -p -m 0755 /usr/local/nn-analytics/dfs/name/current && ' +
            'mkdir -p -m 0755 /usr/local/nn-analytics/dfs/name/legacy && ' +
            'chown -R hdfs: /usr/local/nn-analytics/dfs && ' +
            'mkdir -p -m 0755 /usr/local/nn-analytics/db && ' +
            'chown -R hdfs: /usr/local/nn-analytics/db &&' +
            'mkdir -p -m 0755 /var/log/nn-analytics && ' +
            'chown hdfs: /var/log/nn-analytics && ' +
            'cp /usr/local/nn-analytics/bin/nn-analytics /etc/init.d/ && ' +
            'update-rc.d nn-analytics defaults'
}

ospackage {
    packageName = 'nn-analytics'
    version = versioning.info.full.startsWith("null") ? "1.2." + hadoopVersion : versioning.info.full
    release = 0
    os = LINUX

    user 'root'
    permissionGroup 'root'

    into '/usr/local/nn-analytics/'

    from('build/version.properties') {
        fileMode = 0444
    }
    from(jar.outputs.files) {
        into 'lib'
    }
    from(configurations.outboundDep.files) {
        into 'lib'
    }
    from('src/main/resources/bin') {
        into 'bin'
        fileMode = 0755
    }
    from('src/main/resources/env') {
        fileType CONFIG | NOREPLACE
        into 'bin'
        fileMode = 0755
    }
    from('src/main/resources/config') {
        fileType CONFIG | NOREPLACE
        into 'config'
    }
    from('src/main/resources/webapps') {
        fileType CONFIG | NOREPLACE
        into 'webapps'
        fileMode = 0755
    }

}
